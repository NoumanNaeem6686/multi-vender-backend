generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid())
  deviceId         String?   @unique
  firebaseUid      String?   @unique
  email            String?   @unique
  password         String?
  firstName        String?
  lastName         String?
  phone            String?
  mobile           String?   @unique
  avatar           String?
  profilePhoto     String?
  coverPhoto       String?
  isEmailVerified  Boolean   @default(false)
  isPhoneVerified  Boolean   @default(false)
  isActive         Boolean   @default(true)
  role             UserRole  @default(USER)
  status           UserStatus @default(PENDING)
  pinCode          String?
  city             String?
  state            String?
  address          String?
  storeName        String?
  storeAddress     String?
  facebookUrl      String?
  instagramUrl     String?
  youtubeUrl       String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  products         Product[]

  @@map("users")
}

enum UserRole {
  GUEST
  USER
  CUSTOMER
  VENDOR_PENDING
  VENDOR
  ADMIN
}

enum UserStatus {
  PENDING
  APPROVED
  LIVE
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  slug        String    @unique
  image       String?
  isActive    Boolean   @default(true)
  parentId    String?
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]

  @@map("categories")
}

model Product {
  id                  String        @id @default(uuid())
  vendorId            String
  categoryId          String
  name                String
  description         String
  slug                String        @unique
  sku                 String?
  price               Decimal       @db.Decimal(10, 2)
  comparePrice        Decimal?      @db.Decimal(10, 2)
  costPrice           Decimal?      @db.Decimal(10, 2)
  stock               Int           @default(0)
  lowStockThreshold   Int           @default(5)
  trackInventory      Boolean       @default(true)
  images              String[]
  featuredImage       String?
  status              ProductStatus @default(DRAFT)
  isActive            Boolean       @default(true)
  adminApproved       Boolean       @default(false)
  metaTitle           String?
  metaDescription     String?
  tags                String[]
  isFeatured          Boolean       @default(false)
  weight              Decimal?      @db.Decimal(8, 2)
  dimensions          String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  // Relations
  vendor              User          @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  category            Category      @relation(fields: [categoryId], references: [id], onDelete: Restrict)

  @@map("products")
}

enum ProductStatus {
  DRAFT
  ACTIVE
  INACTIVE
  PENDING_REVIEW
  REJECTED
}
